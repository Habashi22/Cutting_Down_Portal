// <auto-generated />
using System;
using CleanArchitecture.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Channel", b =>
                {
                    b.Property<int>("Channel_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Channel_Key"));

                    b.Property<string>("Channel_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Channel_Key");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            Channel_Key = 1,
                            Channel_Name = "Source A"
                        },
                        new
                        {
                            Channel_Key = 2,
                            Channel_Name = "Source B"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Detail", b =>
                {
                    b.Property<int>("Cutting_Down_Detail_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Detail_Key"));

                    b.Property<DateTime>("ActualCreatetDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Cutting_Down_Key")
                        .HasColumnType("int");

                    b.Property<int>("ImpactedCustomers")
                        .HasColumnType("int");

                    b.Property<int?>("Network_Element_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Network_Element_Key1")
                        .HasColumnType("int");

                    b.HasKey("Cutting_Down_Detail_Key");

                    b.HasIndex("Cutting_Down_Key");

                    b.HasIndex("Network_Element_Key");

                    b.HasIndex("Network_Element_Key1");

                    b.ToTable("Cutting_Down_Details");

                    b.HasData(
                        new
                        {
                            Cutting_Down_Detail_Key = 11,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Key = 1,
                            ImpactedCustomers = 100,
                            Network_Element_Key = 7
                        },
                        new
                        {
                            Cutting_Down_Detail_Key = 12,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Key = 1,
                            ImpactedCustomers = 50,
                            Network_Element_Key = 8
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", b =>
                {
                    b.Property<int>("Cutting_Down_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Key"));

                    b.Property<DateTime>("ActualCreatetDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Channel_Key")
                        .HasColumnType("int");

                    b.Property<int>("CreateSystemUserID")
                        .HasColumnType("int");

                    b.Property<int>("Cutting_Down_Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("Cutting_Down_Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateSystemUserID")
                        .HasColumnType("int");

                    b.HasKey("Cutting_Down_Key");

                    b.HasIndex("Channel_Key");

                    b.HasIndex("Cutting_Down_Problem_Type_Key");

                    b.ToTable("Cutting_Down_Headers");

                    b.HasData(
                        new
                        {
                            Cutting_Down_Key = 1,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Channel_Key = 1,
                            CreateSystemUserID = 1,
                            Cutting_Down_Incident_ID = 1,
                            Cutting_Down_Problem_Type_Key = 1,
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            SynchCreateDate = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateSystemUserID = 1
                        },
                        new
                        {
                            Cutting_Down_Key = 2,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Channel_Key = 2,
                            CreateSystemUserID = 2,
                            Cutting_Down_Incident_ID = 2,
                            Cutting_Down_Problem_Type_Key = 2,
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            SynchCreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateSystemUserID = 2
                        },
                        new
                        {
                            Cutting_Down_Key = 3,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Channel_Key = 1,
                            CreateSystemUserID = 3,
                            Cutting_Down_Incident_ID = 123,
                            Cutting_Down_Problem_Type_Key = 3,
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            SynchCreateDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateSystemUserID = 3
                        },
                        new
                        {
                            Cutting_Down_Key = 4,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Channel_Key = 2,
                            CreateSystemUserID = 4,
                            Cutting_Down_Incident_ID = 321,
                            Cutting_Down_Problem_Type_Key = 4,
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            SynchCreateDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateSystemUserID = 4
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Ignored", b =>
                {
                    b.Property<int>("Cutting_Down_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Incident_ID"));

                    b.Property<DateTime>("ActualCreatetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cabel_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cabin_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cutting_Down_HeaderCutting_Down_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Cutting_Down_Key")
                        .HasColumnType("int");

                    b.Property<DateTime>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Cutting_Down_Incident_ID");

                    b.HasIndex("Cutting_Down_HeaderCutting_Down_Key");

                    b.HasIndex("Cutting_Down_Key");

                    b.ToTable("Cutting_Down_Ignoreds");

                    b.HasData(
                        new
                        {
                            Cutting_Down_Incident_ID = 1,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cabel_Name = "147",
                            Cabin_Name = "963",
                            CreatedUser = "admin",
                            SynchCreateDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Cutting_Down_Incident_ID = 2,
                            ActualCreatetDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cabel_Name = "",
                            Cabin_Name = "963",
                            CreatedUser = "admin",
                            SynchCreateDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", b =>
                {
                    b.Property<int>("Network_Element_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Key"));

                    b.Property<string>("Network_Element_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Network_Element_Type_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Parent_Network_Element_Key")
                        .HasColumnType("int");

                    b.HasKey("Network_Element_Key");

                    b.HasIndex("Network_Element_Type_Key");

                    b.HasIndex("Parent_Network_Element_Key");

                    b.ToTable("Network_Elements");

                    b.HasData(
                        new
                        {
                            Network_Element_Key = 1,
                            Network_Element_Name = "gov 1 (cairo for example)",
                            Network_Element_Type_Key = 1
                        },
                        new
                        {
                            Network_Element_Key = 2,
                            Network_Element_Name = "sec 1 (north)",
                            Network_Element_Type_Key = 2,
                            Parent_Network_Element_Key = 1
                        },
                        new
                        {
                            Network_Element_Key = 3,
                            Network_Element_Name = "Zone 1 (1st)",
                            Network_Element_Type_Key = 3,
                            Parent_Network_Element_Key = 2
                        },
                        new
                        {
                            Network_Element_Key = 4,
                            Network_Element_Name = "Cty 1 (Nasr City)",
                            Network_Element_Type_Key = 4,
                            Parent_Network_Element_Key = 3
                        },
                        new
                        {
                            Network_Element_Key = 5,
                            Network_Element_Name = "Stion 1 (prod-1-1)",
                            Network_Element_Type_Key = 5,
                            Parent_Network_Element_Key = 4
                        },
                        new
                        {
                            Network_Element_Key = 6,
                            Network_Element_Name = "Toer 1 (dc-1-1)",
                            Network_Element_Type_Key = 6,
                            Parent_Network_Element_Key = 5
                        },
                        new
                        {
                            Network_Element_Key = 7,
                            Network_Element_Name = "Cbn 1 (cab-1-1)",
                            Network_Element_Type_Key = 7,
                            Parent_Network_Element_Key = 6
                        },
                        new
                        {
                            Network_Element_Key = 8,
                            Network_Element_Name = "Cbl 1 (ch-1-1)",
                            Network_Element_Type_Key = 8,
                            Parent_Network_Element_Key = 7
                        },
                        new
                        {
                            Network_Element_Key = 9,
                            Network_Element_Name = "Blk 1 (111-111-111)",
                            Network_Element_Type_Key = 9,
                            Parent_Network_Element_Key = 8
                        },
                        new
                        {
                            Network_Element_Key = 10,
                            Network_Element_Name = "Blding 1 (asd-1-1)",
                            Network_Element_Type_Key = 10,
                            Parent_Network_Element_Key = 9
                        },
                        new
                        {
                            Network_Element_Key = 11,
                            Network_Element_Name = "Flt 1 (1)",
                            Network_Element_Type_Key = 11,
                            Parent_Network_Element_Key = 10
                        },
                        new
                        {
                            Network_Element_Key = 12,
                            Network_Element_Name = "Indv Subs 1 (1)",
                            Network_Element_Type_Key = 12,
                            Parent_Network_Element_Key = 11
                        },
                        new
                        {
                            Network_Element_Key = 13,
                            Network_Element_Name = "Corp Subs 1 (3)",
                            Network_Element_Type_Key = 13,
                            Parent_Network_Element_Key = 10
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Hierarchy_Path", b =>
                {
                    b.Property<int>("Network_Element_Hierarchy_Path_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Hierarchy_Path_Key"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Netwrok_Element_Hierarchy_Path_Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Network_Element_Hierarchy_Path_Key");

                    b.ToTable("Network_Element_Hierarchy_Paths");

                    b.HasData(
                        new
                        {
                            Network_Element_Hierarchy_Path_Key = 1,
                            Abbreviation = "Governrate -> Individual Subscription",
                            Netwrok_Element_Hierarchy_Path_Name = "Governrate, Sector, Zone, City, Station, Tower, Cabin, Cable, Buidling, Flat, Individual Subscription"
                        },
                        new
                        {
                            Network_Element_Hierarchy_Path_Key = 2,
                            Abbreviation = "Governrate -> Corporate Subscription",
                            Netwrok_Element_Hierarchy_Path_Name = "Governrate, Sector, Zone, City, Station, Tower, Cabin, Cable, Buidling, Corporate Subscription"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Type", b =>
                {
                    b.Property<int>("Network_Element_Type_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Type_key"));

                    b.Property<int>("Network_Element_Hierarchy_Path_Key")
                        .HasColumnType("int");

                    b.Property<string>("Network_Element_Type_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Parent_Network_Element_Type_Key")
                        .HasColumnType("int");

                    b.HasKey("Network_Element_Type_key");

                    b.HasIndex("Network_Element_Hierarchy_Path_Key");

                    b.HasIndex("Parent_Network_Element_Type_Key");

                    b.ToTable("Network_Element_Type");

                    b.HasData(
                        new
                        {
                            Network_Element_Type_key = 1,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Governrate"
                        },
                        new
                        {
                            Network_Element_Type_key = 2,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Sector",
                            Parent_Network_Element_Type_Key = 1
                        },
                        new
                        {
                            Network_Element_Type_key = 3,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Zone",
                            Parent_Network_Element_Type_Key = 2
                        },
                        new
                        {
                            Network_Element_Type_key = 4,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "City",
                            Parent_Network_Element_Type_Key = 3
                        },
                        new
                        {
                            Network_Element_Type_key = 5,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Station",
                            Parent_Network_Element_Type_Key = 4
                        },
                        new
                        {
                            Network_Element_Type_key = 6,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Tower",
                            Parent_Network_Element_Type_Key = 5
                        },
                        new
                        {
                            Network_Element_Type_key = 7,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Cabin",
                            Parent_Network_Element_Type_Key = 6
                        },
                        new
                        {
                            Network_Element_Type_key = 8,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Cable",
                            Parent_Network_Element_Type_Key = 7
                        },
                        new
                        {
                            Network_Element_Type_key = 9,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Block",
                            Parent_Network_Element_Type_Key = 8
                        },
                        new
                        {
                            Network_Element_Type_key = 10,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Building",
                            Parent_Network_Element_Type_Key = 9
                        },
                        new
                        {
                            Network_Element_Type_key = 11,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Flat",
                            Parent_Network_Element_Type_Key = 10
                        },
                        new
                        {
                            Network_Element_Type_key = 12,
                            Network_Element_Hierarchy_Path_Key = 1,
                            Network_Element_Type_Name = "Individual Subscription",
                            Parent_Network_Element_Type_Key = 11
                        },
                        new
                        {
                            Network_Element_Type_key = 13,
                            Network_Element_Hierarchy_Path_Key = 2,
                            Network_Element_Type_Name = "Corporate Subscription",
                            Parent_Network_Element_Type_Key = 10
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.User", b =>
                {
                    b.Property<int>("User_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Key");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            User_Key = 1,
                            Name = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            User_Key = 2,
                            Name = "test",
                            Password = "test"
                        },
                        new
                        {
                            User_Key = 3,
                            Name = "SourceA",
                            Password = "Source_A"
                        },
                        new
                        {
                            User_Key = 4,
                            Name = "SourceB",
                            Password = "Source_B"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Block", b =>
                {
                    b.Property<int>("Block_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Block_Key"));

                    b.Property<string>("Block_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cable_Key")
                        .HasColumnType("int");

                    b.HasKey("Block_Key");

                    b.HasIndex("Cable_Key");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Block_Key = 1,
                            Block_Name = "111-111-111",
                            Cable_Key = 1
                        },
                        new
                        {
                            Block_Key = 2,
                            Block_Name = "222-222-222",
                            Cable_Key = 1
                        },
                        new
                        {
                            Block_Key = 3,
                            Block_Name = "333-333-333",
                            Cable_Key = 2
                        },
                        new
                        {
                            Block_Key = 4,
                            Block_Name = "444-444-444",
                            Cable_Key = 2
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Building", b =>
                {
                    b.Property<int>("Building_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Building_Key"));

                    b.Property<int>("Block_Key")
                        .HasColumnType("int");

                    b.Property<string>("Building_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Building_Key");

                    b.HasIndex("Block_Key");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Building_Key = 1,
                            Block_Key = 1,
                            Building_Name = "asd-1-1"
                        },
                        new
                        {
                            Building_Key = 2,
                            Block_Key = 1,
                            Building_Name = "asd-1-2"
                        },
                        new
                        {
                            Building_Key = 3,
                            Block_Key = 2,
                            Building_Name = "asd-2-1"
                        },
                        new
                        {
                            Building_Key = 4,
                            Block_Key = 2,
                            Building_Name = "asd-2-1"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cabin", b =>
                {
                    b.Property<int>("Cabin_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cabin_Key"));

                    b.Property<string>("Cabin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tower_Key")
                        .HasColumnType("int");

                    b.HasKey("Cabin_Key");

                    b.HasIndex("Tower_Key");

                    b.ToTable("Cabins");

                    b.HasData(
                        new
                        {
                            Cabin_Key = 1,
                            Cabin_Name = "cab-1-1",
                            Tower_Key = 1
                        },
                        new
                        {
                            Cabin_Key = 2,
                            Cabin_Name = "cab-1-2",
                            Tower_Key = 1
                        },
                        new
                        {
                            Cabin_Key = 3,
                            Cabin_Name = "cab-2-1",
                            Tower_Key = 2
                        },
                        new
                        {
                            Cabin_Key = 4,
                            Cabin_Name = "cab-2-2",
                            Tower_Key = 2
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cable", b =>
                {
                    b.Property<int>("Cable_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cable_Key"));

                    b.Property<int>("Cabin_Key")
                        .HasColumnType("int");

                    b.Property<string>("Cable_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cable_Key");

                    b.HasIndex("Cabin_Key");

                    b.ToTable("Cables");

                    b.HasData(
                        new
                        {
                            Cable_Key = 1,
                            Cabin_Key = 1,
                            Cable_Name = "ch-1-1"
                        },
                        new
                        {
                            Cable_Key = 2,
                            Cabin_Key = 1,
                            Cable_Name = "ch-1-2"
                        },
                        new
                        {
                            Cable_Key = 3,
                            Cabin_Key = 2,
                            Cable_Name = "ch-2-1"
                        },
                        new
                        {
                            Cable_Key = 4,
                            Cabin_Key = 2,
                            Cable_Name = "ch-2-2"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.City", b =>
                {
                    b.Property<int>("City_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Key"));

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zone_Key")
                        .HasColumnType("int");

                    b.HasKey("City_Key");

                    b.HasIndex("Zone_Key");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            City_Key = 1,
                            City_Name = "Nasr City",
                            Zone_Key = 1
                        },
                        new
                        {
                            City_Key = 2,
                            City_Name = "Al Salam City",
                            Zone_Key = 1
                        },
                        new
                        {
                            City_Key = 3,
                            City_Name = "Dar Al Salam",
                            Zone_Key = 2
                        },
                        new
                        {
                            City_Key = 4,
                            City_Name = "Helwan",
                            Zone_Key = 2
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.CuttingDownA", b =>
                {
                    b.Property<int>("Cutting_Down_A_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_A_Incident_ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cutting_Down_Cabin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<int?>("NetworkElementNetwork_Element_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Network_Element_Key")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cutting_Down_A_Incident_ID");

                    b.HasIndex("NetworkElementNetwork_Element_Key");

                    b.HasIndex("Problem_Type_Key");

                    b.ToTable("CuttingDownAs");

                    b.HasData(
                        new
                        {
                            Cutting_Down_A_Incident_ID = 1,
                            CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-1",
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            Problem_Type_Key = 1
                        },
                        new
                        {
                            Cutting_Down_A_Incident_ID = 2,
                            CreateDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-2",
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 2
                        },
                        new
                        {
                            Cutting_Down_A_Incident_ID = 3,
                            CreateDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-3",
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = false,
                            Problem_Type_Key = 3
                        },
                        new
                        {
                            Cutting_Down_A_Incident_ID = 4,
                            CreateDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-4",
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 4
                        },
                        new
                        {
                            Cutting_Down_A_Incident_ID = 5,
                            CreateDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-5",
                            EndDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            Problem_Type_Key = 5
                        },
                        new
                        {
                            Cutting_Down_A_Incident_ID = 6,
                            CreateDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cabin_Name = "cab-1-6",
                            EndDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2021, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 6
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.CuttingDownB", b =>
                {
                    b.Property<int>("Cutting_Down_B_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_B_Incident_ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cutting_Down_Cable_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<int?>("NetworkElementNetwork_Element_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Network_Element_Key")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cutting_Down_B_Incident_ID");

                    b.HasIndex("NetworkElementNetwork_Element_Key");

                    b.HasIndex("Problem_Type_Key");

                    b.ToTable("CuttingDownBs");

                    b.HasData(
                        new
                        {
                            Cutting_Down_B_Incident_ID = 1,
                            CreateDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-1",
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            Problem_Type_Key = 11
                        },
                        new
                        {
                            Cutting_Down_B_Incident_ID = 2,
                            CreateDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-2",
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 12
                        },
                        new
                        {
                            Cutting_Down_B_Incident_ID = 3,
                            CreateDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-3",
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = false,
                            Problem_Type_Key = 13
                        },
                        new
                        {
                            Cutting_Down_B_Incident_ID = 4,
                            CreateDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-4",
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 4
                        },
                        new
                        {
                            Cutting_Down_B_Incident_ID = 5,
                            CreateDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-5",
                            EndDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsGlobal = false,
                            IsPlanned = false,
                            Problem_Type_Key = 5
                        },
                        new
                        {
                            Cutting_Down_B_Incident_ID = 6,
                            CreateDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cutting_Down_Cable_Name = "ch-1-6",
                            EndDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsGlobal = true,
                            IsPlanned = true,
                            PlannedEndDTS = new DateTime(2021, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedStartDTS = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem_Type_Key = 6
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Flat", b =>
                {
                    b.Property<int>("Flat_Key")
                        .HasColumnType("int");

                    b.Property<int>("Building_Key")
                        .HasColumnType("int");

                    b.HasKey("Flat_Key", "Building_Key");

                    b.HasIndex("Building_Key");

                    b.ToTable("Flats");

                    b.HasData(
                        new
                        {
                            Flat_Key = 1,
                            Building_Key = 1
                        },
                        new
                        {
                            Flat_Key = 2,
                            Building_Key = 1
                        },
                        new
                        {
                            Flat_Key = 3,
                            Building_Key = 2
                        },
                        new
                        {
                            Flat_Key = 4,
                            Building_Key = 2
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Governrate", b =>
                {
                    b.Property<int>("Governrate_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Governrate_Key"));

                    b.Property<string>("Governrate_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Governrate_Key");

                    b.ToTable("Governrates");

                    b.HasData(
                        new
                        {
                            Governrate_Key = 1,
                            Governrate_Name = "Cairo"
                        },
                        new
                        {
                            Governrate_Key = 2,
                            Governrate_Name = "Alex"
                        },
                        new
                        {
                            Governrate_Key = 3,
                            Governrate_Name = "Giza"
                        },
                        new
                        {
                            Governrate_Key = 4,
                            Governrate_Name = "Suez"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.ProblemType", b =>
                {
                    b.Property<int>("Problem_Type_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Problem_Type_Key"));

                    b.Property<string>("Problem_Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Problem_Type_Key");

                    b.ToTable("ProblemTypes");

                    b.HasData(
                        new
                        {
                            Problem_Type_Key = 1,
                            Problem_Type_Name = "حريق"
                        },
                        new
                        {
                            Problem_Type_Key = 2,
                            Problem_Type_Name = "ضغط عالى"
                        },
                        new
                        {
                            Problem_Type_Key = 3,
                            Problem_Type_Name = "استهلاك عالى"
                        },
                        new
                        {
                            Problem_Type_Key = 4,
                            Problem_Type_Name = "مديونيه"
                        },
                        new
                        {
                            Problem_Type_Key = 5,
                            Problem_Type_Name = "تلف عداد"
                        },
                        new
                        {
                            Problem_Type_Key = 6,
                            Problem_Type_Name = "سرقة تيار"
                        },
                        new
                        {
                            Problem_Type_Key = 7,
                            Problem_Type_Name = "امطار"
                        },
                        new
                        {
                            Problem_Type_Key = 8,
                            Problem_Type_Name = "كسر ماسورة مياه"
                        },
                        new
                        {
                            Problem_Type_Key = 9,
                            Problem_Type_Name = "كسر ماسورة غاز"
                        },
                        new
                        {
                            Problem_Type_Key = 10,
                            Problem_Type_Name = "تحديث واحلال"
                        },
                        new
                        {
                            Problem_Type_Key = 11,
                            Problem_Type_Name = "صيانه"
                        },
                        new
                        {
                            Problem_Type_Key = 12,
                            Problem_Type_Name = "كابل مقطوع"
                        },
                        new
                        {
                            Problem_Type_Key = 13,
                            Problem_Type_Name = "توصيل كابل"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Sector", b =>
                {
                    b.Property<int>("Sector_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sector_Key"));

                    b.Property<int>("Governrate_Key")
                        .HasColumnType("int");

                    b.Property<string>("Sector_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sector_Key");

                    b.HasIndex("Governrate_Key");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Sector_Key = 1,
                            Governrate_Key = 1,
                            Sector_Name = "North"
                        },
                        new
                        {
                            Sector_Key = 2,
                            Governrate_Key = 1,
                            Sector_Name = "East"
                        },
                        new
                        {
                            Sector_Key = 3,
                            Governrate_Key = 1,
                            Sector_Name = "West"
                        },
                        new
                        {
                            Sector_Key = 4,
                            Governrate_Key = 1,
                            Sector_Name = "South"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Station", b =>
                {
                    b.Property<int>("Station_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Station_Key"));

                    b.Property<int>("City_Key")
                        .HasColumnType("int");

                    b.Property<string>("Station_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Station_Key");

                    b.HasIndex("City_Key");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Station_Key = 1,
                            City_Key = 1,
                            Station_Name = "prod-1-1"
                        },
                        new
                        {
                            Station_Key = 2,
                            City_Key = 1,
                            Station_Name = "prod-1-2"
                        },
                        new
                        {
                            Station_Key = 3,
                            City_Key = 2,
                            Station_Name = "prod-2-1"
                        },
                        new
                        {
                            Station_Key = 4,
                            City_Key = 2,
                            Station_Name = "prod-2-2"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Subscription", b =>
                {
                    b.Property<int>("Subscription_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subscription_Key"));

                    b.Property<int>("Building_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Building_Key1")
                        .HasColumnType("int");

                    b.Property<int>("Flat_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Meter_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Palet_Key")
                        .HasColumnType("int");

                    b.HasKey("Subscription_Key");

                    b.HasIndex("Building_Key");

                    b.HasIndex("Building_Key1");

                    b.HasIndex("Flat_Key", "Building_Key");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Subscription_Key = 1,
                            Building_Key = 1,
                            Flat_Key = 1,
                            Meter_Key = 1,
                            Palet_Key = 11
                        },
                        new
                        {
                            Subscription_Key = 2,
                            Building_Key = 1,
                            Flat_Key = 2,
                            Meter_Key = 1,
                            Palet_Key = 2
                        },
                        new
                        {
                            Subscription_Key = 3,
                            Building_Key = 2,
                            Flat_Key = 3,
                            Meter_Key = 3
                        },
                        new
                        {
                            Subscription_Key = 4,
                            Building_Key = 2,
                            Flat_Key = 4,
                            Meter_Key = 4
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Tower", b =>
                {
                    b.Property<int>("Tower_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tower_Key"));

                    b.Property<int>("Station_Key")
                        .HasColumnType("int");

                    b.Property<string>("Tower_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tower_Key");

                    b.HasIndex("Station_Key");

                    b.ToTable("Towers");

                    b.HasData(
                        new
                        {
                            Tower_Key = 1,
                            Station_Key = 1,
                            Tower_Name = "dc-1-1"
                        },
                        new
                        {
                            Tower_Key = 2,
                            Station_Key = 1,
                            Tower_Name = "dc-1-2"
                        },
                        new
                        {
                            Tower_Key = 3,
                            Station_Key = 2,
                            Tower_Name = "dc-2-1"
                        },
                        new
                        {
                            Tower_Key = 4,
                            Station_Key = 2,
                            Tower_Name = "dc-2-2"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Zone", b =>
                {
                    b.Property<int>("Zone_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zone_Key"));

                    b.Property<int>("Sector_Key")
                        .HasColumnType("int");

                    b.Property<string>("Zone_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Zone_Key");

                    b.HasIndex("Sector_Key");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Zone_Key = 1,
                            Sector_Key = 1,
                            Zone_Name = "منطقه اولى"
                        },
                        new
                        {
                            Zone_Key = 2,
                            Sector_Key = 1,
                            Zone_Name = "منطقه ثانيه"
                        },
                        new
                        {
                            Zone_Key = 3,
                            Sector_Key = 1,
                            Zone_Name = "منطقه ثالثه"
                        },
                        new
                        {
                            Zone_Key = 4,
                            Sector_Key = 1,
                            Zone_Name = "منطقه رابعه"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8de70db5-c6fb-4555-a3df-476db1e632b3",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "8408c5f2-0932-40f8-911a-6d49a3bbfe16",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Detail", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", "Cutting_Down_Header")
                        .WithMany("Cutting_Down_Details")
                        .HasForeignKey("Cutting_Down_Key")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", "Network_Element")
                        .WithMany()
                        .HasForeignKey("Network_Element_Key")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", null)
                        .WithMany("CuttingDownDetails")
                        .HasForeignKey("Network_Element_Key1");

                    b.Navigation("Cutting_Down_Header");

                    b.Navigation("Network_Element");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("Channel_Key")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.ProblemType", "Problem_Type")
                        .WithMany()
                        .HasForeignKey("Cutting_Down_Problem_Type_Key")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Problem_Type");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Ignored", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", null)
                        .WithMany("Cutting_Down_Ignoreds")
                        .HasForeignKey("Cutting_Down_HeaderCutting_Down_Key");

                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", "Cutting_Down_Header")
                        .WithMany()
                        .HasForeignKey("Cutting_Down_Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cutting_Down_Header");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Type", "Network_Element_Type")
                        .WithMany("Network_Elements")
                        .HasForeignKey("Network_Element_Type_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", "Parent_Network_Element")
                        .WithMany("Child_Elements")
                        .HasForeignKey("Parent_Network_Element_Key")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Network_Element_Type");

                    b.Navigation("Parent_Network_Element");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Type", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Hierarchy_Path", "Network_Element_Hierarchy_Path")
                        .WithMany("Network_Element_Types")
                        .HasForeignKey("Network_Element_Hierarchy_Path_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Type", "Parent_Network_Element_Type")
                        .WithMany("Child_Types")
                        .HasForeignKey("Parent_Network_Element_Type_Key")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Network_Element_Hierarchy_Path");

                    b.Navigation("Parent_Network_Element_Type");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Block", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Cable", "Cable")
                        .WithMany("Blocks")
                        .HasForeignKey("Cable_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Building", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Block", "Block")
                        .WithMany("Buildings")
                        .HasForeignKey("Block_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cabin", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Tower", "Tower")
                        .WithMany("Cabins")
                        .HasForeignKey("Tower_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cable", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Cabin", "Cabin")
                        .WithMany("Cables")
                        .HasForeignKey("Cabin_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.City", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Zone", "Zone")
                        .WithMany("Cities")
                        .HasForeignKey("Zone_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.CuttingDownA", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", "NetworkElement")
                        .WithMany("CuttingDownAs")
                        .HasForeignKey("NetworkElementNetwork_Element_Key");

                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.ProblemType", "ProblemType")
                        .WithMany("CuttingDownAs")
                        .HasForeignKey("Problem_Type_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkElement");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.CuttingDownB", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", "NetworkElement")
                        .WithMany("CuttingDownBs")
                        .HasForeignKey("NetworkElementNetwork_Element_Key");

                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.ProblemType", "ProblemType")
                        .WithMany("CuttingDownBs")
                        .HasForeignKey("Problem_Type_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkElement");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Flat", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("Building_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Sector", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Governrate", "Governrate")
                        .WithMany("Sectors")
                        .HasForeignKey("Governrate_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governrate");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Station", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("City_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Subscription", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Building", null)
                        .WithMany()
                        .HasForeignKey("Building_Key")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Building", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("Building_Key1");

                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Flat", "Flat")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Flat_Key", "Building_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Tower", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Station", "Station")
                        .WithMany("Towers")
                        .HasForeignKey("Station_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Zone", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.Staging_models.Sector", "Sector")
                        .WithMany("Zones")
                        .HasForeignKey("Sector_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CleanArchitecture.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Cutting_Down_Header", b =>
                {
                    b.Navigation("Cutting_Down_Details");

                    b.Navigation("Cutting_Down_Ignoreds");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element", b =>
                {
                    b.Navigation("Child_Elements");

                    b.Navigation("CuttingDownAs");

                    b.Navigation("CuttingDownBs");

                    b.Navigation("CuttingDownDetails");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Hierarchy_Path", b =>
                {
                    b.Navigation("Network_Element_Types");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Fact_models.Network_Element_Type", b =>
                {
                    b.Navigation("Child_Types");

                    b.Navigation("Network_Elements");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Block", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Building", b =>
                {
                    b.Navigation("Flats");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cabin", b =>
                {
                    b.Navigation("Cables");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Cable", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Flat", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Governrate", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.ProblemType", b =>
                {
                    b.Navigation("CuttingDownAs");

                    b.Navigation("CuttingDownBs");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Sector", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Station", b =>
                {
                    b.Navigation("Towers");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Tower", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("CleanArchitecture.DataAccess.Models.Staging_models.Zone", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
